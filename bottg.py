import telebot
from telebot import types
import requests

TOKEN = '*****'  #–¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ (–°–∫—Ä—ã—Ç)

bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])  #–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {0.first_name}!'.format(message.from_user), reply_markup=markup)
    bot.send_message(message.chat.id, '–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π, —Ä–µ–∑—é–º–µ –∏ –∏—Ö –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é DB, –Ω–∞ –æ—Å–Ω–æ–≤–µ API hh.ru.'.format(message.from_user), reply_markup=markup)
    bot.send_message(message.chat.id, '–ß—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ç–µ–±–µ –∫–æ–º–∞–Ω–¥—É, –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º –º–µ–Ω—é –Ω–∏–∂–µ'.format(message.from_user), reply_markup=markup)

@bot.message_handler(commands=['resume']) #–ü–æ –∫–æ–º–∞–Ω–¥–µ /resume
def welcome(message):
    mesg = bot.send_message(message.chat.id,'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Ä–µ–∑—é–º–µ.')
    bot.register_next_step_handler(mesg,test)
def test(message):
    bot.send_message(message.chat.id,'–°–ø–∞—Å–∏–±–æ, –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥‚Ü©Ô∏è')
    markup.add(back)
    stick = open('–ü–û–ò–°–ö.png', 'rb')
    bot.send_sticker(message.chat.id, stick, reply_markup=markup)

    def get_resumes(keyword):
        url = "https://api.hh.ru/resumes"
        params = {
            "text": keyword,
            "area": 1,  #id –ì–æ—Ä–æ–¥–∞ (1 - –ú–æ—Å–∫–≤–∞ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –ø–æ —Å–ø–∏—Å–∫—É (2 - –ü–∏—Ç–µ—Ä –∏ —Ç–¥))
            "per_page": 5,  #–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –≤ –æ—Ç–≤–µ—Ç–µ
        }
        headers = {
            "User-Agent": "Your User Agent",  # Replace with your User-Agent header
        }

        response = requests.get(url, params=params, headers=headers)

        if response.status_code == 200:
            data = response.json()
            resumes = data.get("items", [])
            for resume in resumes:
                #–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ä–µ–∑—é–º–µ
                resume_id = resume.get("id")
                resume_url = resume.get("alternate_url")
                resume_block_title_position = resume.get("position")
                bloko_header_2 = resume.get("experience", {}).get("name")
                resume_personal_gender = resume.get("name")
                resume_personal_age = resume.get("age")
                bot.send_message(message.chat.id,
                                 f"ID: {resume_id}\nURL: {resume_url}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {resume_block_title_position}\n–û–ø—ã—Ç: {bloko_header_2}\n–ü–æ–ª: {resume_personal_gender}\n–í–æ–∑—Ä–∞—Å—Ç: {resume_personal_age}\n",
                                 reply_markup=markup)
        else:
            bot.send_message(message.chat.id, f"Request failed with status code: {response.status_code}",
                             reply_markup=markup)

    #bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –≤–∞–º —Ä–µ–∑—é–º–µ', reply_markup=markup)
    get_resumes(message.text)  #–í–≤–æ–¥ —Ä–µ–∑—é–º–µ

@bot.message_handler(commands=['vacancy']) #–ü–æ –∫–æ–º–∞–Ω–¥–µ /vacancy
def welcome(message):
    mesg = bot.send_message(message.chat.id,'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤–∞–∫–∞–Ω—Å–∏—é.')
    bot.register_next_step_handler(mesg,test)

def test(message):
    bot.send_message(message.chat.id,'–°–ø–∞—Å–∏–±–æ, –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥‚Ü©Ô∏è')
    markup.add(back)
    stick = open('–ü–û–ò–°–ö.png', 'rb')
    bot.send_sticker(message.chat.id, stick, reply_markup=markup)
    def get_vacancies(keyword):
        url = "https://api.hh.ru/vacancies"
        params = {
            "text": keyword,
            "area": 1,  #id –ì–æ—Ä–æ–¥–∞ (1 - –ú–æ—Å–∫–≤–∞ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –ø–æ —Å–ø–∏—Å–∫—É (2 - –ü–∏—Ç–µ—Ä –∏ —Ç–¥))
            "per_page": 5,  #–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ –æ—Ç–≤–µ—Ç–µ
        }
        headers = {
            "User-Agent": "Your User Agent",  #Replace with your User-Agent header
        }

        # args = []
        response = requests.get(url, params=params, headers=headers)

        if response.status_code == 200:
            data = response.json()
            vacancies = data.get("items", [])
            for vacancy in vacancies:
                #–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏
                vacancy_id = vacancy.get("id")
                vacancy_title = vacancy.get("name")
                vacancy_url = vacancy.get("alternate_url")
                company_name = vacancy.get("employer", {}).get("name")
                #vacancy_salary_compensation_type_net = vacancy.get("salary", {}).get("from") Pay: {vacancy_salary_compensation_type_net}\n –ù–µ –≤–æ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö —É–∫–∞–∑–∞–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞
                #vacancy_viewers_count = vacancy.get("") Viewers: {vacancy_viewers_count}\n –ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                vacancy_description_list_item = vacancy.get("employment", {}).get("name")
                vacancy_experience = vacancy.get("experience", {}).get("name")
                bot.send_message(message.chat.id, f"ID: {vacancy_id}\nURL: {vacancy_url}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy_title}\n–ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {vacancy_experience}\n–§–æ—Ä–º–∞—Ç: {vacancy_description_list_item}\n", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, f"Request failed with status code: {response.status_code}", reply_markup=markup)

    #bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤–∞–º –≤–∞–∫–∞–Ω—Å–∏—é', reply_markup=markup)
    get_vacancies(message.text)  #–í–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–∏

@bot.message_handler(commands=['menu'])  #–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /menu - –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('‚ÑπÔ∏è–ò–Ω—Ñ–æ‚ÑπÔ∏è')
    item2 = types.KeyboardButton('üõ†Ô∏è–†–∞–±–æ—Ç–∞üõ†Ô∏è')
    item3 = types.KeyboardButton('‚öôÔ∏è–î—Ä—É–≥–æ–µ‚öôÔ∏è')
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:'.format(message.from_user), reply_markup=markup)

@bot.message_handler(content_types=['text'])  #–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /menu - –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def messy(message):
    if message.chat.type == 'private':
        if message.text == '‚ÑπÔ∏è–ò–Ω—Ñ–æ‚ÑπÔ∏è':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('ü§ñ–û –±–æ—Ç–µü§ñ')
            item2 = types.KeyboardButton('üìç–ö–æ–º–∞–Ω–¥—ãüìç')
            back = types.KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥‚Ü©Ô∏è')
            markup.add(item1, item2, back)
            stick = open('–ò–ù–§–û–†–ú–ê–¶–ò–Ø.png', 'rb')
            bot.send_sticker(message.chat.id, stick, reply_markup=markup)

        elif message.text == 'üõ†Ô∏è–†–∞–±–æ—Ç–∞üõ†Ô∏è':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('üîé–í–∞–∫–∞–Ω—Å–∏–∏üîé')
            item2 = types.KeyboardButton('üìä–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏üìä')
            item3 = types.KeyboardButton('üîé–†–µ–∑—é–º–µüîé')
            back = types.KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥‚Ü©Ô∏è')
            markup.add(item1, item2, item3, back)
            stick = open('–†–ê–ë–û–¢–ê.png', 'rb')
            bot.send_sticker(message.chat.id, stick, reply_markup=markup)

        elif message.text == '‚Ü©Ô∏è–ù–∞–∑–∞–¥‚Ü©Ô∏è':  #–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –≤ –ø–µ—Ä–≤–æ–µ –º–µ–Ω—é
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('‚ÑπÔ∏è–ò–Ω—Ñ–æ‚ÑπÔ∏è')
            item2 = types.KeyboardButton('üõ†Ô∏è–†–∞–±–æ—Ç–∞üõ†Ô∏è')
            item3 = types.KeyboardButton('‚öôÔ∏è–î—Ä—É–≥–æ–µ‚öôÔ∏è')
            markup.add(item1, item2, item3)
            stick = open('–ù–ê–ó–ê–î.png', 'rb')
            bot.send_sticker(message.chat.id, stick, reply_markup=markup)

        elif message.text == '‚öôÔ∏è–î—Ä—É–≥–æ–µ‚öôÔ∏è':  #–ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –∏ –Ω–∞—Ä–∞–±–æ—Ç–æ–∫
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            back = types.KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥‚Ü©Ô∏è')
            markup.add(back)
            bot.send_message(message.chat.id, '–ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', reply_markup=markup)
            # bot.send_message(message.chat.id, '*' + str(random.randint(0, 10))) #–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏
            # stick = open('scale.png','rb')
            # bot.send_sticker(message.chat.id, stick)

        elif message.text == 'üìç–ö–æ–º–∞–Ω–¥—ãüìç':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            back = types.KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥‚Ü©Ô∏è')
            markup.add(back)
            stick = open('–ö–û–ú–ê–ù–î–´.png', 'rb')
            bot.send_sticker(message.chat.id, stick, reply_markup=markup)
            bot.send_message(message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞; /vacancy - –ü–æ–∏—Å–∫ –í–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É; /resume - –ü–æ–∏—Å–∫ –†–µ–∑—é–º–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É; /menu - –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)

        elif message.text == 'ü§ñ–û –±–æ—Ç–µü§ñ':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            back = types.KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥‚Ü©Ô∏è')
            markup.add(back)
            stick = open('–û –ë–û–¢–ï.png', 'rb')  #–î–æ–ø. –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–∏, –≤ –≤–∏–¥–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
            bot.send_sticker(message.chat.id, stick, reply_markup=markup)
            bot.send_message(message.chat.id, '–ë–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ú–¢–£–°–ò', reply_markup=markup)

        elif message.text == 'üîé–í–∞–∫–∞–Ω—Å–∏–∏üîé':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            back = types.KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥‚Ü©Ô∏è')
            markup.add(back)
            stick = open('–ü–û–ò–°–ö.png', 'rb')
            bot.send_sticker(message.chat.id, stick, reply_markup=markup)

bot.polling(none_stop=True)  #–ß—Ç–æ –±—ã —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ (–ù–µ –≤—ã–∫–ª—é—á–∞–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã)